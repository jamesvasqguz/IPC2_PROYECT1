package UI.Administrador;
//Importamos las clases y las utilidades que usaremos en la actulizacion de la ruta

import UI.Administrador.jFActualizarRuta;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import Class.ConectorDB;
import java.sql.Connection;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jara
 */
public class jFGestionarRuta extends javax.swing.JFrame {
//Atributos que declaramos globales para poder ser usados en los distintos metodos   

    Connection cn = ConectorDB.conexion();
    DefaultTableModel model = new DefaultTableModel();
    public static int actualizarRuta;
    public static String nombreRuta;
    public static String destino;

    /**
     * Creates new form jFGestionarRuta
     */

    public jFGestionarRuta() {
        initComponents();
        setSize(750, 500);
        setResizable(false);
        setTitle("Gestionar Rutas");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        llenarRutas();                                                          //Llamamos al metodo que llenara la tabla    

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableRutas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Bitstream Vera Serif", 3, 24)); // NOI18N
        jLabel1.setText("Informacion de las Rutas");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(180, 20, 370, 40);

        tableRutas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableRutas);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 90, 710, 290);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 750, 500);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableRutas;
    // End of variables declaration//GEN-END:variables
//Este metodo hace que la tabla se llene de las Rutas que existen con sus datos
    public void llenarRutas() {
        try {
            PreparedStatement ps = cn.prepareStatement(
                    "SELECT id_rutas, nombre_ruta, estado_ruta, destino, precio_libra, precio_destino FROM Rutas");
            ResultSet rs = ps.executeQuery();
            tableRutas = new JTable(model);
            jScrollPane1.setViewportView(tableRutas);
            model.addColumn("ID de la Ruta");
            model.addColumn("Nombre de la Ruta");
            model.addColumn("Estado de la Ruta");
            model.addColumn("Destino de la Ruta");
            model.addColumn("Precio del Destino");
            model.addColumn("Precio x Libra");
            while (rs.next()) {
                Object[] ob = new Object[6];
                for (int i = 0; i < ob.length; i++) {
                    ob[i] = rs.getObject(i + 1);
                }
                model.addRow(ob);
            }
            cn.close();
        } catch (SQLException e) {
            System.err.println("Error al rellenar la tabla");
            JOptionPane.showMessageDialog(null, "Error en la conexion DB con la Tabla");
        }

        tableRutas.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = tableRutas.rowAtPoint(e.getPoint());

                if (fila_point > -1) {
                    actualizarRuta = (int) model.getValueAt(fila_point, 0);
                    nombreRuta = (String) model.getValueAt(fila_point, 1);
                    destino = (String) model.getValueAt(fila_point, 3);
                    jFActualizarRuta ar = new jFActualizarRuta();
                    ar.setVisible(true);
                }
            }
        });
    }
}
