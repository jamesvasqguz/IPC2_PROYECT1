package UI.Administrador;
//Importamos las clases y las utilidades que usaremos en la actulizacion del usuario

import UI.Inicio.FromPrincipal;
import Class.ConectorDB;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 *
 * @author jara
 */
public class jFActualizarPunto extends javax.swing.JFrame {
//Atributos que declaramos globales para poder ser usados en los distintos metodos        

    String user = "", punto = "", cmb_Estado, nombreNuevo;
    int cmb_estado, opeNuevo, idUsuarioNue, capacidad;
    float tarifaNu;
    Connection cn = ConectorDB.conexion();

    /**
     * Creates new form jFActualizarPunto
     */
    public jFActualizarPunto() {
        initComponents();
        setSize(650, 500);
        setResizable(false);
        setTitle("Actualizar Punto de Control");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        user = FromPrincipal.user;
        punto = jFGestionarPuntoControl.actualizarPunto;
        jLabel1.setText("Informacion del Punto de Control: " + punto);
        createCheckpoint();                                                     //Llamamos al metodo que ingresa los operadores en el ComboBox
        llenarInfo();                                                           //Llamamos al metodo que nos llena los campos con los datos del PC
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnActualizar = new javax.swing.JButton();
        txtNombreRuta = new javax.swing.JTextField();
        cmbEstado = new javax.swing.JComboBox<>();
        txtPrecio = new javax.swing.JTextField();
        txtNombrePunto = new javax.swing.JTextField();
        cmbNombreOpe = new javax.swing.JComboBox<>();
        btnEliminar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtCant = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(650, 500));
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Bitstream Vera Sans", 3, 18)); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 10, 540, 40);

        jLabel2.setText("Nombre del Punto de Control");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(210, 300, 190, 15);

        jLabel3.setText("Nombre del Operario");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(30, 160, 150, 15);

        jLabel4.setText("Estado del Punto de Control");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(360, 70, 190, 15);

        jLabel5.setText("Precio x hora:");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(360, 160, 110, 15);

        jLabel6.setText("Nombre de la Ruta");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(30, 70, 150, 15);

        btnActualizar.setText("Actualizar Punto");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        jPanel1.add(btnActualizar);
        btnActualizar.setBounds(90, 370, 180, 60);

        txtNombreRuta.setEditable(false);
        jPanel1.add(txtNombreRuta);
        txtNombreRuta.setBounds(30, 90, 270, 32);

        cmbEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activa", "Inactiva" }));
        jPanel1.add(cmbEstado);
        cmbEstado.setBounds(360, 90, 102, 32);
        jPanel1.add(txtPrecio);
        txtPrecio.setBounds(360, 180, 180, 32);

        txtNombrePunto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombrePuntoKeyTyped(evt);
            }
        });
        jPanel1.add(txtNombrePunto);
        txtNombrePunto.setBounds(140, 320, 340, 32);

        jPanel1.add(cmbNombreOpe);
        cmbNombreOpe.setBounds(30, 180, 270, 32);

        btnEliminar.setText("Eliminar Punto");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar);
        btnEliminar.setBounds(360, 370, 190, 60);

        jLabel7.setText("Capacidad del Punto:");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(240, 230, 170, 15);

        txtCant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantKeyTyped(evt);
            }
        });
        jPanel1.add(txtCant);
        txtCant.setBounds(250, 250, 110, 32);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 650, 500);

        pack();
    }// </editor-fold>//GEN-END:initComponents
//Este metodo obtiene las modificaciones del PC y las actualiza en la DB
    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        combo();                                                                //Llamamos al metodo que guarda la eleccion del 
        actualizarPC();                                                         //Llamamos al metodo que actualiza los datos del PC
    }//GEN-LAST:event_btnActualizarActionPerformed
//Este metodo permite eliminar el PC
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
            PreparedStatement ps1 = cn.prepareStatement(
                    "DELETE FROM PuntoControl WHERE id_punto='" + jFGestionarPuntoControl.idPunto + "'");
            ps1.executeUpdate();
            JOptionPane.showMessageDialog(null, "Punto de Control Eliminado con exito!");

        } catch (SQLException e) {
            System.err.println("Error al borrar Punto de control " + e);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtCantKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantKeyTyped
        char c = evt.getKeyChar();
        if (c < '0' || c > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_txtCantKeyTyped

    private void txtNombrePuntoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombrePuntoKeyTyped

    }//GEN-LAST:event_txtNombrePuntoKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox<String> cmbEstado;
    private javax.swing.JComboBox<String> cmbNombreOpe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtCant;
    private javax.swing.JTextField txtNombrePunto;
    private javax.swing.JTextField txtNombreRuta;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
//Este metodo llena los campos con los datos del PC 
    public void llenarInfo() {
        try {
            PreparedStatement ps = cn.prepareStatement(
                    "SELECT * FROM PuntoControl WHERE nombre_punto ='" + punto + "'");
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                txtPrecio.setText(rs.getString("tarifa"));
                txtNombrePunto.setText(rs.getString("nombre_punto"));
                txtCant.setText(rs.getString("size"));
                cmbEstado.setSelectedItem(rs.getString("estado_punto"));
            }

            PreparedStatement ps1 = cn.prepareStatement(
                    "SELECT * FROM Rutas WHERE id_rutas ='" + jFGestionarPuntoControl.idRuta + "'");
            ResultSet rs1 = ps1.executeQuery();
            if (rs1.next()) {
                txtNombreRuta.setText(rs1.getString("nombre_ruta"));
            }
            PreparedStatement ps2 = cn.prepareStatement(
                    "SELECT * FROM Usuario WHERE id_usuario ='" + jFGestionarPuntoControl.idUsuario + "'");
            ResultSet rs2 = ps2.executeQuery();
            if (rs2.next()) {
                cmbNombreOpe.setSelectedItem(rs2.getString("nombre_usuario"));
            }
        } catch (SQLException e) {
            System.err.println("Error al cargar usuario" + e);
            JOptionPane.showMessageDialog(null, "Error al cargar usuario!");
        }
    }
//En este metodo agregamos el ArrayList de los Operarios como items del ComboBox

    public void createCheckpoint() {
        try {
            operarios();
            ArrayList<String> list = new ArrayList<String>();
            list = operarios();
            for (int i = 0; i < list.size(); i++) {
                cmbNombreOpe.addItem(list.get(i));
            }
        } catch (Exception e) {
        }
    }
//En este metodo guardamos en un ArrayList los operadores disponibles que pueden ser asiganos al PC

    public ArrayList<String> operarios() {
        ArrayList<String> list = new ArrayList<String>();
        String dato = "SELECT tipo_nivel, nombre_usuario FROM Usuario";
        try {
            PreparedStatement ps1 = cn.prepareStatement(dato);
            ResultSet rs = ps1.executeQuery();
            while (rs.next()) {
                if (rs.getString("tipo_nivel").equals("Operador")) {
                    list.add(rs.getString("nombre_usuario"));
                }
            }
        } catch (SQLException e) {
            System.err.println("Error al conectar DB con Usuario");
        }
        return list;
    }
//En este metodo guardamos en una variable de tipo String en base a la seleccion de ComboBoc de Estado

    public void combo() {
        cmb_estado = cmbEstado.getSelectedIndex() + 1;
        if (cmb_estado == 1) {
            cmb_Estado = "Activo";
        } else if (cmb_estado == 2) {
            cmb_Estado = "Inactivo";
        }
    }
//En este metodo guardamos la variable idUsuariola seleccion del Admin en ComboBox de de los operadores

    public void idUsuario() {
        try {
            PreparedStatement ps5 = cn.prepareStatement("SELECT * FROM Usuario WHERE nombre_usuario ='" + cmbNombreOpe.getSelectedItem().toString() + "'");
            ResultSet rs = ps5.executeQuery();
            if (rs.next()) {
                idUsuarioNue = rs.getInt("id_usuario");
            }
        } catch (SQLException e) {
            System.err.println("Error al insertar el ID del Usuario " + e);
        }
    }

    //Este metodo obtiene las modificaciones del PC y las actualiza en la DB
    public void actualizarPC() {
        int validacion = 0;
        tarifaNu = Float.parseFloat(txtPrecio.getText().trim());
        nombreNuevo = txtNombrePunto.getText().trim();
        capacidad = Integer.parseInt(txtCant.getText().trim());
        idUsuario();
        if (nombreNuevo.equals("")) {
            txtNombrePunto.setBackground(Color.red);
            validacion++;
        }
        try {
            PreparedStatement ps2 = cn.prepareStatement(
                    "UPDATE PuntoControl SET id_usuario=?, estado_punto=?, nombre_punto=?,tarifa=?, size=? "
                    + "WHERE id_punto= '" + jFGestionarPuntoControl.idPunto + "'");
            ps2.setInt(1, idUsuarioNue);
            ps2.setString(2, cmb_Estado);
            ps2.setString(3, nombreNuevo);
            ps2.setFloat(4, tarifaNu);
            ps2.setInt(5, capacidad);
            ps2.executeUpdate();
            cn.close();
            JOptionPane.showMessageDialog(null, "Punto de Control actualizado correctamente!");

        } catch (SQLException e) {
            System.err.println("Error al actualizar" + e);
            JOptionPane.showMessageDialog(null, "Error al actualizar Punto Control!");
        }
    }
}
